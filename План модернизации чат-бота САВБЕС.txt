# План модернизации чат-бота САВБЕС

## Выполненные работы

На данный момент мы значительно улучшили функциональность чат-бота САВБЕС по следующим направлениям:

1. **Умное извлечение параметров** из начального запроса клиента
2. **Логические связи между услугами** для формирования комплексных предложений
3. **Пропуск шагов диалога**, если информация уже присутствует в запросе
4. **Типовые расчеты** на основе площади и типа помещения
5. **Интеллектуальный выбор калькулятора** на основе широкого спектра триггеров
6. **Интеграция всех специализированных калькуляторов** в многофункциональный калькулятор

## Обновленные файлы

### 1. calculator_dispatcher.py

**Что добавлено:**
- Новый метод `detect_calculator_details` для извлечения всех полезных параметров из сообщения
- Словари для распознавания типов объектов, материалов стен, потолков и т.д.
- Триггеры для активации комплексного подхода
- Расширенное логирование для отладки
- Извлечение информации о наличии электрощита и проводки
- Определение типа работ (новостройка или ремонт)

### 2. multi_service_calculator.py

**Что добавлено:**
- Специальный логгер для многофункционального калькулятора
- Словари логических зависимостей между услугами
- Типовые наборы услуг для разных типов объектов
- Функция расчета количества устройств в зависимости от площади
- Дополнительные шаги диалога:
  - Новостройка или ремонт
  - Проверка инфраструктуры
- Механизм интеллектуального предложения услуг
- Функция проверки зависимостей между услугами
- Обработка пропуска шагов при наличии информации
- Интеграция всех специализированных калькуляторов, включая прокладку кабелей
- Шаги диалога для сбора параметров по каждому типу услуг

## Ключевые улучшения пользовательского опыта

### 1. Умный диалог с предварительным извлечением параметров

**Было:**
```
Клиент: Мне нужны розетки в коттедже площадью 180 кв.м
Бот: Выберите тип объекта: (список)
```

**Стало:**
```
Клиент: Мне нужны розетки в коттедже площадью 180 кв.м
Бот: Вы выбрали: Дом/коттедж, площадь: 180 кв.м. Это новостройка или ремонт существующего помещения?
```

### 2. Логические связи между услугами

**Было:**
```
Клиент: Мне нужны розетки
Бот: [запускает только калькулятор розеток]
```

**Стало:**
```
Клиент: Мне нужны розетки
Бот: Для установки розеток потребуется прокладка кабелей и подключение к электрощиту. Хотите рассчитать стоимость всех этих работ вместе?
```

### 3. Типовые предложения на основе площади

**Было:**
```
Клиент: Нужен электромонтаж для квартиры 50 кв.м
Бот: Выберите услуги: [список]
```

**Стало:**
```
Клиент: Нужен электромонтаж для квартиры 50 кв.м
Бот: Для квартиры площадью 50 кв.м обычно требуется:
• Электрощит с 6 автоматами
• Прокладка около 100 метров кабеля
• Установка около 10 розеток
• Монтаж около 5 светильников

Выберите услуги для расчета:
```

## Оставшиеся задачи

### 1. Обновить базовый калькулятор (base_calculator.py)

Необходимо модифицировать для поддержки пропуска шагов, если информация уже присутствует в начальных данных:

```python
@staticmethod
def start_dialog(calculator_class, session_id, chat_states, initial_data=None):
    """Начинает диалог с калькулятором, пропуская шаги с известными данными"""
    
    # Инициализируем данные
    data = initial_data or {}
    
    # Определяем первый шаг, который нужно задать
    # Пропускаем шаги, на которые уже есть ответы в initial_data
    for step in calculator_class.DIALOG_STEPS:
        if step not in data:
            chat_states[session_id]["stage"] = step
            return calculator_class.STEP_MESSAGES[step]
```

### 2. Обновить основной обработчик сообщений (app.py)

Необходимо модифицировать для поддержки нового метода извлечения параметров:

```python
def process_message(message, session_id, chat_states):
    if session_id not in chat_states:  # Новый диалог
        # Определяем тип калькулятора и извлекаем параметры
        calculator_type, use_multi, extracted_params = calculator_dispatcher.detect_calculator_details(message)
        
        if use_multi:
            # Запускаем многофункциональный калькулятор с извлеченными параметрами
            return multi_service_calculator.start_dialog(session_id, chat_states, extracted_params)
        else:
            # Запускаем специализированный калькулятор с извлеченными параметрами
            if calculator_type == "socket":
                return socket_calculator.start_socket_calculation(session_id, chat_states, extracted_params)
            # ...и т.д.
```

### 3. Адаптировать триггеры для прокладки кабеля

В `multi_service_calculator.py` уже добавлена поддержка калькулятора прокладки кабеля, включая:
- Импорт и проверку доступности cabling_calculator.py
- Добавление в список доступных сервисов
- Шаги диалога для сбора параметров прокладки кабеля
- Форматирование результатов для кабельных работ

Однако требуется доработка триггеров в `calculator_dispatcher.py` для корректного распознавания ситуаций, когда клиент запрашивает *только* прокладку кабеля:

- Улучшить распознавание фраз, связанных именно с изолированной прокладкой кабеля
- Добавить дополнительные ключевые слова для различения запросов на прокладку кабеля под розетки и для других целей
- Протестировать работу с запросами типа "нужно только проложить кабель", "проводка без розеток" и т.д.

### 4. Автоматизированное тестирование

Разработать набор тестовых сценариев для проверки работоспособности всех обновленных компонентов:

- Тестирование извлечения параметров из различных запросов
- Тестирование работы логических связей между услугами
- Тестирование пропуска шагов при наличии предварительной информации

## План действий

1. **Обновить base_calculator.py**
   - Добавить метод для пропуска шагов при наличии начальных данных
   - Улучшить логирование и обработку ошибок

2. **Обновить app.py (или основной обработчик сообщений)**
   - Интегрировать новый метод извлечения параметров
   - Добавить логику выбора между многофункциональным и специализированными калькуляторами
   - Обеспечить корректную передачу извлеченных параметров в выбранный калькулятор

3. **Тестирование**
   - Проверить работу бота с различными начальными запросами
   - Протестировать все сценарии выбора услуг
   - Убедиться в правильной работе логических связей

4. **Окончательные корректировки**
   - Оптимизировать извлечение параметров для уменьшения ложных срабатываний
   - Улучшить формулировки предложений услуг для максимального удобства пользователя

5. **Документация**
   - Составить подробную документацию по обновленной архитектуре
   - Добавить примеры использования новых функций
   - Создать руководство по расширению списка калькуляторов в будущем

## Ожидаемые результаты

После завершения всех этапов модернизации чат-бот САВБЕС будет обладать следующими возможностями:

1. **Интеллектуальное понимание запросов** с извлечением всех полезных параметров
2. **Комплексный подход к услугам** с учетом логических связей между ними
3. **Сокращение количества шагов диалога** за счет пропуска уже известной информации
4. **Простое расширение функциональности** при добавлении новых типов услуг

Это значительно улучшит пользовательский опыт и повысит эффективность бота как инструмента для привлечения новых клиентов.